"""
Three-step plan to success:
1) Analyze the data of our Kaggle 1000 to find all of the correlations (pairplot, then line of best fit, then error bars)
2) Train a model (using sklearn; the only independent variable will be income, because all we have is IPR)
3) Use the model to predict the average SAT, ACT, college GPA, and years to graduate college
of our 100,000 schools (basically, sklearn will generate the value from the regression
line that matches the school’s IPR value. The IPR values will be indexed to the parental income levels tho // ie. Take the
parental income, divide by the median USA income, and then that’s the IPR for a given student)
"""

!pip install numpy
!pip install matplotlib
!pip install scikit-learn
!pip install seaborn
!pip install pandas
!pip install scipy

import numpy as np
import matplotlib.pyplot as plt
import scikit-learn as sklearn
import seaborn as sns
import pandas as pd
import scipy

graduation_rate=pd.read_csv("graduation_rate.csv")
IPR=pd.read_csv("IPR.csv")
print(graduation_rate.head(5))
print(IPR.head(5))
print(graduation_rate.columns.to_list())
print(IPR.columns.to_list())

for column in graduation_rate.columns.to_list():
  print(column)

sat = graduation_rate['SAT total score']
act = graduation_rate['ACT composite score']
familyIncome = graduation_rate['parental income']

SATvsACT=plt.scatter(act,sat), plt.xlabel("SAT total score"), plt.ylabel("ACT composite Score"), plt.title("SAT Score vs. ACT Score") 
incomeVsACTScores = plt.scatter(familyIncome, act)  # Income vs ACT scores
incomeVsSATScores = plt.scatter(familyIncome, sat) #Income vs SAT scores

gradratepairwise=sns.pairplot(graduation_rate)

fig = plt.figure()
plotIncomeAndSAT = fig.add_axes([1, 1, 1, 1])
plotIncomeAndSAT.plot(familyIncome, sat)

plotIncomeAndACT = fig.add_axes([1, 0, 1, 1])
plotIncomeAndACT.plot(familyIncome, act)
plt.show() #We can see that the plots for family income vs. SAT scores and ACT scores are very similar.

plotSAT = sns.regplot(data=graduation_rate, x='parental income', y='SAT total score')
slope, intercept, r, p, sterr = scipy.stats.linregress(x=plotSAT.get_lines()[0].get_xdata(),
                                                       y=plotSAT.get_lines()[0].get_ydata())
print("The linear regression equation is y =", str(slope) + "x", "+", intercept)

plotACT = sns.regplot(data=graduation_rate, x='parental income', y='ACT composite score')
slope, intercept, r, p, sterr = scipy.stats.linregress(x=plotACT.get_lines()[0].get_xdata(),
                                                       y=plotACT.get_lines()[0].get_ydata())
print("The linear regression equation is y =", str(slope) + "x", "+", intercept)

#Factor plot
sns.factorplot(data=graduation_rate, x='parental income', y='ACT composite score')
plt.show()

#Other factor plot
sns.factorplot(data=graduation_rate, x='parental income', y='SAT total score')
plt.show() 

#We can see a large spread of test scores within each income bracket.

#This is making a 3D plot that compares SAT and ACT score to college GPA.
satactcolgpa=plt.axes(projection='3d')
sat = graduation_rate['SAT total score']
act = graduation_rate['ACT composite score']
colgpa=graduation_rate["college gpa"]
satactcolgpa.scatter3D(sat,act,colgpa)

#---------------------------------------------------------------------
#Linear Regression Begins Now
#I am going to create a linear regression model that predicts an SAT score given an IPR value.
#This will work to predict the average SAT value of a school given its IPR value.

#This code below is just initializing some variables that will be needed
#in order to fill the list KaggleIPRvalues in the following for loop.
from sklearn.linear_model import LinearRegression
parentalincomelist=graduation_rate["parental income"].tolist()
medianhouseholdincome=70784
KaggleIPRvalues=[]

#This for loop is filling a list with our Kaggle "IPR values"
for income in parentalincomelist:
  IPRvalue=(income/medianhouseholdincome)*100
  KaggleIPRvalues.append(IPRvalue)

#Everything above this point won't need to be repeated in order to create additional models.
#This code block is actually creating our linear regression model (for IPR to SAT).
IPRtrainer = np.array(KaggleIPRvalues).reshape((-1, 1))
SATtrainer = np.array(graduation_rate["SAT total score"].to_list())
SATpredictor = LinearRegression().fit(IPRtrainer,SATtrainer)

#I'm just going to calculate the R score to see how well it fits.
Rscore=SATpredictor.score(IPRtrainer,SATtrainer)
print("R score: {}".format(Rscore))

#And now I am going to create a dictionary that keeps track of the R score for each predictor/model that I make.
Rscoresdict={}
Rscoresdict["SAT Predictor"]=Rscore
print(Rscoresdict)

#I am not going to be worrying about any sort of real data from our data set right now. I'm just going to see if the model sort of works :)
#My previous code worked and I'm literally so proud
SATprediction=SATpredictor.predict(np.array([100]).reshape((-1, 1)))
print(SATprediction)

#Sweet. That worked. Now I need to figure out how to make it do that for every single IPR in the whole data set...
def IPRtoSAT():
  n=0
  for incomepovertyratio in IPR["IPR_EST"].tolist():
    predictedSATscore=SATpredictor.predict(np.array([incomepovertyratio]).reshape((-1, 1)))
    #IPR["SAT Score Prediction"][n]=predictedSATscore // I'm not fully sure why this didn't work, but the other way did...
    IPR.at[n, "SAT Score Prediction"] = predictedSATscore
    n+=1


#Dude. Did that for real just work??? (No syntax errors!)
#Calling the function.
IPRtoSAT()

print(IPR.head(5))

#Imma be risky and try to amalgamate all of the previous code into one code box in this notebook. Wish me luck!
#This is actually creating a whole separate model though, this time to predict ACT score.
#This code block is create a new linear regression model (for IPR to ACT).
IPRtrainer = np.array(KaggleIPRvalues).reshape((-1, 1))
ACTtrainer = np.array(graduation_rate["ACT composite score"].to_list())
ACTpredictor = LinearRegression().fit(IPRtrainer,ACTtrainer)

#I'm just going to calculate the R score to see how well it fits.
Rscore=ACTpredictor.score(IPRtrainer,ACTtrainer)
print("R score: {}".format(Rscore))

#And now I am going to update the Rscoresdict.
Rscoresdict["ACT Predictor"]=Rscore
print(Rscoresdict)
#-----------------------------------------------
def IPRtoACT():
  n=0
  for incomepovertyratio in IPR["IPR_EST"].tolist():
    predictedACTscore=ACTpredictor.predict(np.array([incomepovertyratio]).reshape((-1, 1)))
    #IPR["SAT Score Prediction"][n]=predictedSATscore // I'm not fully sure why this didn't work, but the other way did...
    IPR.at[n, "ACT Score Prediction"] = predictedACTscore
    n+=1
#-----------------------------------------------
IPRtoACT()
print(IPR.head())


#This code block is create a new linear regression model (for IPR to college GPA).
IPRtrainer = np.array(KaggleIPRvalues).reshape((-1, 1))
colGPAtrainer = np.array(graduation_rate["college gpa"].to_list())
colGPApredictor = LinearRegression().fit(IPRtrainer,colGPAtrainer)

#I'm just going to calculate the R score to see how well it fits.
Rscore=colGPApredictor.score(IPRtrainer,colGPAtrainer)
print("R score: {}".format(Rscore))

#And now I am going to update the Rscoresdict.
Rscoresdict["College GPA Predictor"]=Rscore
print(Rscoresdict)
#-----------------------------------------------
def IPRtoColGPA():
  n=0
  for incomepovertyratio in IPR["IPR_EST"].tolist():
    predictedcolGPA=colGPApredictor.predict(np.array([incomepovertyratio]).reshape((-1, 1)))
    #IPR["SAT Score Prediction"][n]=predictedSATscore // I'm not fully sure why this didn't work, but the other way did...
    IPR.at[n, "College GPA Prediction"] = predictedcolGPA
    n+=1
#-----------------------------------------------
IPRtoColGPA()
print(IPR.head())

#This code block is create a new linear regression model (for IPR to years to graduate).
IPRtrainer = np.array(KaggleIPRvalues).reshape((-1, 1))
yearstrainer = np.array(graduation_rate["years to graduate"].to_list())
yearspredictor = LinearRegression().fit(IPRtrainer,yearstrainer)

#I'm just going to calculate the R score to see how well it fits.
Rscore=yearspredictor.score(IPRtrainer,yearstrainer)
print("R score: {}".format(Rscore))

#And now I am going to update the Rscoresdict.
Rscoresdict["Years Predictor"]=Rscore
print(Rscoresdict)
#-----------------------------------------------
def IPRtoYears():
  n=0
  for incomepovertyratio in IPR["IPR_EST"].tolist():
    predictedyears=yearspredictor.predict(np.array([incomepovertyratio]).reshape((-1, 1)))
    #IPR["SAT Score Prediction"][n]=predictedSATscore // I'm not fully sure why this didn't work, but the other way did...
    IPR.at[n, "Years Prediction"] = predictedyears
    n+=1
#-----------------------------------------------
IPRtoYears()
print(IPR.head())


#This code block is create a new linear regression model (for IPR to high school GPA).
IPRtrainer = np.array(KaggleIPRvalues).reshape((-1, 1))
hsGPAtrainer = np.array(graduation_rate["high school gpa"].to_list())
hsGPApredictor = LinearRegression().fit(IPRtrainer,hsGPAtrainer)

#I'm just going to calculate the R score to see how well it fits.
Rscore=hsGPApredictor.score(IPRtrainer,hsGPAtrainer)
print("R score: {}".format(Rscore))

#And now I am going to update the Rscoresdict.
Rscoresdict["High School GPA Predictor"]=Rscore
print(Rscoresdict)
#-----------------------------------------------
def IPRtohsGPA():
  n=0
  for incomepovertyratio in IPR["IPR_EST"].tolist():
    predictedhsGPA=hsGPApredictor.predict(np.array([incomepovertyratio]).reshape((-1, 1)))
    #IPR["SAT Score Prediction"][n]=predictedSATscore // I'm not fully sure why this didn't work, but the other way did...
    IPR.at[n, "HS GPA Prediction"] = predictedhsGPA
    n+=1
#-----------------------------------------------
IPRtohsGPA()
print(IPR.head())

#-----------------------------------------------
#Histograms and Graphs Begin Now
#I am going to plot histograms of the predicted data to see if, for example, predicted SAT scores for our ~100,000 schools skew high
#This is the histogram for SAT Score Prediction
predictedSAThist= plt.hist(IPR["SAT Score Prediction"], bins=50, alpha=0.5, histtype='stepfilled', color='steelblue',edgecolor='none')
plt.xlabel("Predicted Average SAT Score")
plt.ylabel("Number of Schools")
plt.title("SAT Score Prediction Distribution")

#This is the histogram for ACT Score Prediction
predictedACThist=plt.hist(IPR["ACT Score Prediction"], bins=50, alpha=0.5, histtype='stepfilled', color='steelblue',edgecolor='none')
plt.xlabel("Predicted Average ACT Score")
plt.ylabel("Number of Schools")
plt.title("ACT Score Prediction Distribution")

#This is the histogram for College GPA Prediction
predictedcolGPAhist=plt.hist(IPR["College GPA Prediction"], bins=50, alpha=0.5, histtype='stepfilled', color='steelblue',edgecolor='none')
plt.xlabel("Predicted Average College GPA")
plt.ylabel("Number of Schools")
plt.title("College GPA Prediction Distribution")

#This is the histogram for Years Prediction
predictedyearshist=plt.hist(IPR["Years Prediction"], bins=50, alpha=0.5, histtype='stepfilled', color='steelblue',edgecolor='none')
plt.xlabel("Predicted Average Years to Graduate College")
plt.ylabel("Number of Schools")
plt.title("Years to Graduate Prediction Distribution")

#This is the histogram for HS GPA Prediction
predictedhsGPAhist=plt.hist(IPR["HS GPA Prediction"], bins=50, alpha=0.5, histtype='stepfilled', color='steelblue',edgecolor='none')
plt.xlabel("Predicted Average High School GPA")
plt.ylabel("Number of Schools")
plt.title("High School GPA Prediction Distribution")

#I am going to create graphs of IPR vs. predicted value for all of our models
#I'll start with the SAT Score Prediction for now
predictedSATgraph=plt.plot(IPR["IPR_EST"],IPR["SAT Score Prediction"])
plt.xlabel("School IPR")
plt.ylabel("School's Predicted Average SAT Score")
plt.title("IPR to Predicted Average SAT Score")

predictedACTgraph=plt.plot(IPR["IPR_EST"],IPR["ACT Score Prediction"])
plt.xlabel("School IPR")
plt.ylabel("School's Predicted Average ACT Score")
plt.title("IPR to Predicted Average ACT Score")


predictedcolGPAgraph=plt.plot(IPR["IPR_EST"],IPR["College GPA Prediction"])
plt.xlabel("School IPR")
plt.ylabel("School's Students' Predicted Average College GPA")
plt.title("IPR to College GPA")

predictedyearsgraph=plt.plot(IPR["IPR_EST"],IPR["Years Prediction"])
plt.xlabel("School IPR")
plt.ylabel("School's Students' Predicted Average Years to Graduate College")
plt.title("IPR to Years to Graduate College")

predictedhsGPA=plt.plot(IPR["IPR_EST"],IPR["HS GPA Prediction"])
plt.xlabel("School IPR")
plt.ylabel("School's Students' Predicted Average High School GPA")
plt.title("IPR to High School GPA")

#This was me just testing something at one point. IDK where it initally was.
print(graduation_rate["parental income"].tolist())
print(IPR.columns.tolist())
print(IPR["LAT"][2])

#------------------------------------------
#Multiple Linear Regression Stuff Begins Now
#This first model is going to take parental income and parental education level as independent variables and output the predicted college GPA.

#This code below is just initializing some variables that will be needed.
parentalincomelist=graduation_rate["parental income"].tolist()
parentaleducationlist=[]

#I'm creating a way to assign a numeric value to parental educational attainment and then create a list containing those values.
#The for loop is iterating through the parental education column of our dataset and creating a new, numeric version of the data.
for degree in graduation_rate["parental level of education"]:
  if degree == "some high school":
    parentaleducationlist.append(0)
  elif degree == "high school":
    parentaleducationlist.append(1)
  elif degree == "associate's degree":
    parentaleducationlist.append(2)
  elif degree == "some college":
    parentaleducationlist.append(3)
  elif degree == "bachelor's degree":
    parentaleducationlist.append(4)
  elif degree == "master's degree":
    parentaleducationlist.append(5)

#Everything above this point won't need to be repeated in order to create additional models.
#Techically I just repeated it from my single/simple linear regression models, but I want to be able to run this code and have it work w/o having to run the other box.
#This code block is actually creating our multiple linear regression model (for college GPA).
bivariatetrainer=np.array(list(zip(parentalincomelist,parentaleducationlist))).reshape((-1,2))
colGPAtrainer = np.array(graduation_rate["college gpa"].to_list())
individualcolGPApredictor = LinearRegression().fit(bivariatetrainer,colGPAtrainer)

#I'm just going to calculate the R score to see how well it fits.
Rscore=individualcolGPApredictor.score(bivariatetrainer,colGPAtrainer)
print("R score: {}".format(Rscore))

#And now I am going to create a dictionary that keeps track of the R score for each predictor/model that I make.
multivarRscoresdict={}
multivarRscoresdict["Individual College GPA Predictor"]=Rscore
print(multivarRscoresdict)

print(individualcolGPApredictor.predict([[100000,5]])) #I'm just seeing if the model works

#This second model is going to take the same independent variables as before, but the output will be predicted years to graduate college.

#This code block is actually creating our multiple linear regression model (for years to graduate college).
yearstrainer = np.array(graduation_rate["years to graduate"].to_list())
individualyearspredictor = LinearRegression().fit(bivariatetrainer,yearstrainer)

#I'm just going to calculate the R score to see how well it fits.
Rscore=individualyearspredictor.score(bivariatetrainer,yearstrainer)
print("R score: {}".format(Rscore))

#And now I am going to update dictionary that keeps track of the R score for each predictor/model that I make.
multivarRscoresdict["Individual Years Predictor"]=Rscore
print(multivarRscoresdict)

print(individualyearspredictor.predict([[100000,5]])) #I'm just seeing if the model outputs some sort of reasonable value.
     
#This is going to create a model that determines your "college destiny" based on your parents' income and education level.
def collegedestiny():
  futurecolGPA=0
  futureyears=0
  printstatement={}
  userparentalincome=int(input("What is your parents' income? Do not use commas."))
  userparentaleducation=int(input("What is your parents' level of education? Input '0' for some high school, '1' for high school, '2' for associate's degree, '3' for some college, '4' for bachelor's degree, and '5' for master's degree."))
  if input("Would you like to predict your future college GPA? If so, type 'yes'.").strip().lower()=="yes"or"yep"or"sure": #accounting for users not reading directions
    futurecolGPA=individualcolGPApredictor.predict([[userparentalincome,userparentaleducation]])
    printstatement.update({"Future College GPA":int(futurecolGPA)})
  if input("Would you like to predict the years it will take you to graduate college? If so, type 'yes'.").strip().lower()=="yes"or"yep"or"sure":
    futureyears=individualyearspredictor.predict([[userparentalincome,userparentaleducation]])
    printstatement.update({"Years to Graduate College":int(futureyears)})
  return print(printstatement)

collegedestiny() #Meeting your fate
