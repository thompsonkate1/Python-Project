"""
In this project, we analyzed educational data to find correlations between family income and standardized test scores (as well as other educational metrics like college GPA). We also created several models to predict a school's average standardized test scores and other things based off their income-to-poverty ratio.
"""

!pip install numpy
!pip install matplotlib
!pip install scikit-learn
!pip install seaborn
!pip install pandas
!pip install scipy

import numpy as np
import matplotlib.pyplot as plt
import scikit-learn as sklearn
import seaborn as sns
import pandas as pd
import scipy

graduation_rate=pd.read_csv("graduation_rate.csv")
IPR=pd.read_csv("IPR.csv")
print(graduation_rate.head(5))
print(IPR.head(5))
print(graduation_rate.columns.to_list())
print(IPR.columns.to_list())

for column in graduation_rate.columns.to_list():
  print(column)

sat = graduation_rate['SAT total score']
act = graduation_rate['ACT composite score']
familyIncome = graduation_rate['parental income']
collegeGPA = graduation_rate['college gpa']
yearsToGrad = graduation_rate['years to graduate']

SATvsACT=plt.scatter(act,sat), plt.xlabel("SAT total score"), plt.ylabel("ACT composite Score"), plt.title("SAT Score vs. ACT Score") 

gradratepairwise=sns.pairplot(graduation_rate)
plt.savefig("pairwise.png")

incomeVsACTScores = plt.scatter(familyIncome, act)  # Income vs ACT scores
plt.xlabel("Family Income")
plt.ylabel("ACT Composite Score")
plt.title("Income vs. ACT Scores")

incomeVsSATScores = plt.scatter(familyIncome, sat) #Income vs SAT scores
plt.xlabel("Family Income")
plt.ylabel("SAT Total Score")
plt.title("Income vs. SAT Scores")

fig = plt.figure()
plotIncomeAndSAT = fig.add_axes([1, 1, 1, 1])
plotIncomeAndSAT.plot(familyIncome, sat)

plotIncomeAndACT = fig.add_axes([1, 0, 1, 1])
plotIncomeAndACT.plot(familyIncome, act)

plt.xlabel("Family Income")
plotIncomeAndACT.set_ylabel("ACT Scores")
plotIncomeAndSAT.set_ylabel("SAT Scores")
plotIncomeAndSAT.set_title("Family Income vs. Standardized Test Scores")

fig = plt.show() #We can see that the plots for family income vs. SAT scores and ACT scores are very similar.

#Income vs. college GPA.
plt.scatter(familyIncome, collegeGPA)
plt.xlabel("Parental Income")
plt.ylabel("College GPA")
plt.title("Income vs. College GPA")

#Income vs. years to graduate college.
plt.scatter(familyIncome, yearsToGrad)
plt.xlabel("Parental Income")
plt.ylabel("Years to Graduate College")
plt.title("Income vs. Time in College")

plotSAT = sns.regplot(data=graduation_rate, x='parental income', y='SAT total score')
slope, intercept, r, p, sterr = scipy.stats.linregress(x=plotSAT.get_lines()[0].get_xdata(),
                                                       y=plotSAT.get_lines()[0].get_ydata())
print("The linear regression equation is\n y =", str(slope) + "x", "+", intercept)

plotACT = sns.regplot(data=graduation_rate, x='parental income', y='ACT composite score')
slope, intercept, r, p, sterr = scipy.stats.linregress(x=plotACT.get_lines()[0].get_xdata(),
                                                       y=plotACT.get_lines()[0].get_ydata())
print("The linear regression equation is \n y =", str(slope) + "x", "+", intercept)

#Factor plot
sns.factorplot(data=graduation_rate, x='parental income', y='ACT composite score')
plt.show()

#Other factor plot
sns.factorplot(data=graduation_rate, x='parental income', y='SAT total score')
plt.show() 

#We can see a large spread of test scores within each income bracket.

#This is making a 3D plot that compares SAT and ACT score to college GPA.
#This all has #'s because it wasn't as useful as we thought and didn't end up getting used.
#satactcolgpa=plt.axes(projection='3d')
#sat = graduation_rate['SAT total score']
#act = graduation_rate['ACT composite score']
#colgpa=graduation_rate["college gpa"]
#satactcolgpa.scatter3D(sat,act,colgpa)

#---------------------------------------------------------------------
#Linear Regression Begins Now
#I am going to create a linear regression model that predicts an SAT score given an IPR value.
#This will work to predict the average SAT value of a school given its IPR value.

#This code below is just initializing some variables that will be needed
#in order to fill the list KaggleIPRvalues in the following for loop.
from sklearn.linear_model import LinearRegression
parentalincomelist=graduation_rate["parental income"].tolist()
povertylevel=30000
#Since our Kaggle dataset deals with parental income, but our dataset of ~100,000 schools contains IPR values, we need to find a way to equate parental income to IPR in order to generate IPR values for our model.
#The number of $30,000 as the poverty level operates on the assumption that every one of our Kaggle students lived in a family of four.
#The $30,000 is the Federal Poverty Level for 2023 for a family of four.
KaggleIPRvalues=[]

#This for loop is filling a list with our Kaggle "IPR values"
for income in parentalincomelist:
  IPRvalue=(income/povertylevel)*100
  KaggleIPRvalues.append(IPRvalue)

#Everything above this point won't need to be repeated in order to create additional models.
#This code block is actually creating our linear regression model (for IPR to SAT).
IPRtrainer = np.array(KaggleIPRvalues).reshape((-1, 1))
SATtrainer = np.array(graduation_rate["SAT total score"].to_list())
SATpredictor = LinearRegression().fit(IPRtrainer,SATtrainer)

#I'm just going to calculate the R score to see how well it fits.
Rscore=SATpredictor.score(IPRtrainer,SATtrainer)
print("R score: {}".format(Rscore))

#And now I am going to create a dictionary that keeps track of the R score for each predictor/model that I make.
Rscoresdict={}
Rscoresdict["SAT Predictor"]=Rscore
print(Rscoresdict)

#Checking to verify that the model works.
SATprediction=SATpredictor.predict(np.array([800]).reshape((-1, 1)))
print(SATprediction)

def IPRtoSAT():
  n=0
  for incomepovertyratio in IPR["IPR_EST"].tolist():
    predictedSATscore=SATpredictor.predict(np.array([incomepovertyratio]).reshape((-1, 1)))
    #IPR["SAT Score Prediction"][n]=predictedSATscore // I'm not fully sure why this didn't work, but the other way did...
    IPR.at[n, "SAT Score Prediction"] = predictedSATscore
    n+=1

#Calling the function.
IPRtoSAT()

print(IPR.head(5))

#This code block is creating a new linear regression model (for IPR to ACT).
IPRtrainer = np.array(KaggleIPRvalues).reshape((-1, 1))
ACTtrainer = np.array(graduation_rate["ACT composite score"].to_list())
ACTpredictor = LinearRegression().fit(IPRtrainer,ACTtrainer)

#Calculating the R score to see how well the model fits.
Rscore=ACTpredictor.score(IPRtrainer,ACTtrainer)
print("R score: {}".format(Rscore))

#Updating the Rscoresdict.
Rscoresdict["ACT Predictor"]=Rscore
print(Rscoresdict)
#-----------------------------------------------
def IPRtoACT():
  n=0
  for incomepovertyratio in IPR["IPR_EST"].tolist():
    predictedACTscore=ACTpredictor.predict(np.array([incomepovertyratio]).reshape((-1, 1)))
    #IPR["SAT Score Prediction"][n]=predictedSATscore // I'm not fully sure why this didn't work, but the other way did...
    IPR.at[n, "ACT Score Prediction"] = predictedACTscore
    n+=1
#-----------------------------------------------
IPRtoACT()
print(IPR.head())


#This code block is creating a new linear regression model (for IPR to college GPA).
IPRtrainer = np.array(KaggleIPRvalues).reshape((-1, 1))
colGPAtrainer = np.array(graduation_rate["college gpa"].to_list())
colGPApredictor = LinearRegression().fit(IPRtrainer,colGPAtrainer)

#Calculating the R score to see how well it fits.
Rscore=colGPApredictor.score(IPRtrainer,colGPAtrainer)
print("R score: {}".format(Rscore))

#Updating the Rscoresdict.
Rscoresdict["College GPA Predictor"]=Rscore
print(Rscoresdict)
#-----------------------------------------------
def IPRtoColGPA():
  n=0
  for incomepovertyratio in IPR["IPR_EST"].tolist():
    predictedcolGPA=colGPApredictor.predict(np.array([incomepovertyratio]).reshape((-1, 1)))
    #IPR["SAT Score Prediction"][n]=predictedSATscore // I'm not fully sure why this didn't work, but the other way did...
    IPR.at[n, "College GPA Prediction"] = predictedcolGPA
    n+=1
#-----------------------------------------------
IPRtoColGPA()
print(IPR.head())

#This code block creates a new linear regression model (for IPR to years to graduate).
IPRtrainer = np.array(KaggleIPRvalues).reshape((-1, 1))
yearstrainer = np.array(graduation_rate["years to graduate"].to_list())
yearspredictor = LinearRegression().fit(IPRtrainer,yearstrainer)

#Calculating the R score to see how well it fits.
Rscore=yearspredictor.score(IPRtrainer,yearstrainer)
print("R score: {}".format(Rscore))

#Updating the Rscoresdict.
Rscoresdict["Years Predictor"]=Rscore
print(Rscoresdict)
#-----------------------------------------------
def IPRtoYears():
  n=0
  for incomepovertyratio in IPR["IPR_EST"].tolist():
    predictedyears=yearspredictor.predict(np.array([incomepovertyratio]).reshape((-1, 1)))
    #IPR["SAT Score Prediction"][n]=predictedSATscore // I'm not fully sure why this didn't work, but the other way did...
    IPR.at[n, "Years Prediction"] = predictedyears
    n+=1
#-----------------------------------------------
IPRtoYears()
print(IPR.head())


#Creating a new linear regression model (for IPR to high school GPA).
IPRtrainer = np.array(KaggleIPRvalues).reshape((-1, 1))
hsGPAtrainer = np.array(graduation_rate["high school gpa"].to_list())
hsGPApredictor = LinearRegression().fit(IPRtrainer,hsGPAtrainer)

#Calculating the R score to see how well it fits.
Rscore=hsGPApredictor.score(IPRtrainer,hsGPAtrainer)
print("R score: {}".format(Rscore))

#Updating the Rscoresdict.
Rscoresdict["High School GPA Predictor"]=Rscore
print(Rscoresdict)
#-----------------------------------------------
def IPRtohsGPA():
  n=0
  for incomepovertyratio in IPR["IPR_EST"].tolist():
    predictedhsGPA=hsGPApredictor.predict(np.array([incomepovertyratio]).reshape((-1, 1)))
    #IPR["SAT Score Prediction"][n]=predictedSATscore // I'm not fully sure why this didn't work, but the other way did...
    IPR.at[n, "HS GPA Prediction"] = predictedhsGPA
    n+=1
#-----------------------------------------------
IPRtohsGPA()
print(IPR.head())

#-----------------------------------------------
#Histograms and Graphs Begin Now
#Plotting histograms of the predicted data to see if, for example, predicted SAT scores for our ~100,000 schools skew high
#This is the histogram for SAT Score Prediction
predictedSAThist= plt.hist(IPR["SAT Score Prediction"], bins=50, alpha=0.5, histtype='stepfilled', color='steelblue',edgecolor='none')
plt.xlabel("Predicted Average SAT Score")
plt.ylabel("Number of Schools")
plt.title("SAT Score Prediction Distribution")

#Calculating a bunch of statistical data to display on the figure
SATmax="{:.5f}".format(float(max(IPR["SAT Score Prediction"])))
SATmin="{:.5f}".format(float(min(IPR["SAT Score Prediction"])))
import statistics
SATmean="{:.5f}".format(float(statistics.mean(IPR["SAT Score Prediction"])))
SATmedian="{:.5f}".format(float(statistics.median(IPR["SAT Score Prediction"])))
SATmode="{:.5f}".format(float(statistics.mode(IPR["SAT Score Prediction"])))
SATstats='''Max: {}
Min: {}
Mean: {}
Median: {}
Mode: {} '''.format(SATmax, SATmin, SATmean, SATmedian, SATmode)
x_coord = max(IPR["SAT Score Prediction"])
y_coord = np.max(predictedSAThist[0])
plt.text(x_coord, y_coord, SATstats, ha='right', va='top')


#This is the histogram for ACT Score Prediction
predictedACThist=plt.hist(IPR["ACT Score Prediction"], bins=50, alpha=0.5, histtype='stepfilled', color='steelblue',edgecolor='none')
plt.xlabel("Predicted Average ACT Score")
plt.ylabel("Number of Schools")
plt.title("ACT Score Prediction Distribution")

#Calculating a bunch of statistical data to display on the figure
ACTmax="{:.5f}".format(float(max(IPR["ACT Score Prediction"])))
ACTmin="{:.5f}".format(float(min(IPR["ACT Score Prediction"])))
import statistics
ACTmean="{:.5f}".format(float(statistics.mean(IPR["ACT Score Prediction"])))
ACTmedian="{:.5f}".format(float(statistics.median(IPR["ACT Score Prediction"])))
ACTmode="{:.5f}".format(float(statistics.mode(IPR["ACT Score Prediction"])))
ACTstats='''Max: {}
Min: {}
Mean: {}
Median: {}
Mode: {} '''.format(ACTmax, ACTmin, ACTmean, ACTmedian, ACTmode)
x_coord = max(IPR["ACT Score Prediction"])
y_coord = np.max(predictedACThist[0])
plt.text(x_coord, y_coord, ACTstats, ha='right', va='top')


#This is the histogram for College GPA Prediction
predictedcolGPAhist=plt.hist(IPR["College GPA Prediction"], bins=50, alpha=0.5, histtype='stepfilled', color='steelblue',edgecolor='none')
plt.xlabel("Predicted Average College GPA")
plt.ylabel("Number of Schools")
plt.title("College GPA Prediction Distribution")

#Calculating a bunch of statistical data to display on the figure
colGPAmax="{:.5f}".format(float(max(IPR["College GPA Prediction"])))
colGPAmin="{:.5f}".format(float(min(IPR["College GPA Prediction"])))
import statistics
colGPAmean="{:.5f}".format(float(statistics.mean(IPR["College GPA Prediction"])))
colGPAmedian="{:.5f}".format(float(statistics.median(IPR["College GPA Prediction"])))
colGPAmode="{:.5f}".format(float(statistics.mode(IPR["College GPA Prediction"])))
colGPAstats='''Max: {}
Min: {}
Mean: {}
Median: {}
Mode: {} '''.format(colGPAmax, colGPAmin, colGPAmean, colGPAmedian, colGPAmode)
x_coord = max(IPR["College GPA Prediction"])
y_coord = np.max(predictedcolGPAhist[0])
plt.text(x_coord, y_coord, colGPAstats, ha='right', va='top')


#This is the histogram for Years Prediction
predictedyearshist=plt.hist(IPR["Years Prediction"], bins=50, alpha=0.5, histtype='stepfilled', color='steelblue',edgecolor='none')
plt.xlabel("Predicted Average Years to Graduate College")
plt.ylabel("Number of Schools")
plt.title("Years to Graduate Prediction Distribution")

#Calculating a bunch of statistical data to display on the figure
yearsmax="{:.5f}".format(float(max(IPR["Years Prediction"])))
yearsmin="{:.5f}".format(float(min(IPR["Years Prediction"])))
import statistics
yearsmean="{:.5f}".format(float(statistics.mean(IPR["Years Prediction"])))
yearsmedian="{:.5f}".format(float(statistics.median(IPR["Years Prediction"])))
yearsmode="{:.5f}".format(float(statistics.mode(IPR["Years Prediction"])))
yearsstats='''Max: {}
Min: {}
Mean: {}
Median: {}
Mode: {} '''.format(yearsmax, yearsmin, yearsmean, yearsmedian, yearsmode)
x_coord = 2.5*min(IPR["Years Prediction"]) #I'm trying to have the text not overlap with the bars
y_coord = np.max(predictedyearshist[0])
plt.text(x_coord, y_coord, colGPAstats, ha='right', va='top')


#This is the histogram for HS GPA Prediction
predictedhsGPAhist=plt.hist(IPR["HS GPA Prediction"], bins=50, alpha=0.5, histtype='stepfilled', color='steelblue',edgecolor='none')
plt.xlabel("Predicted Average High School GPA")
plt.ylabel("Number of Schools")
plt.title("High School GPA Prediction Distribution")

#Calculating a bunch of statistical data to display on the figure
hsGPAmax="{:.5f}".format(float(max(IPR["HS GPA Prediction"])))
hsGPAmin="{:.5f}".format(float(min(IPR["HS GPA Prediction"])))
import statistics
hsGPAmean="{:.5f}".format(float(statistics.mean(IPR["HS GPA Prediction"])))
hsGPAmedian="{:.5f}".format(float(statistics.median(IPR["HS GPA Prediction"])))
hsGPAmode="{:.5f}".format(float(statistics.mode(IPR["HS GPA Prediction"])))
hsGPAstats='''Max: {}
Min: {}
Mean: {}
Median: {}
Mode: {} '''.format(hsGPAmax, hsGPAmin, hsGPAmean, hsGPAmedian, hsGPAmode)
x_coord = max(IPR["HS GPA Prediction"])
y_coord = np.max(predictedhsGPAhist[0])
plt.text(x_coord, y_coord, hsGPAstats, ha='right', va='top')

#Creating graphs of IPR vs. predicted value for all of our models
#Starting with the SAT Score Prediction for now
#I am going to create graphs of IPR vs. predicted value for all of our models
#I'll start with the SAT Score Prediction for now
predictedSATgraph=plt.plot(IPR["IPR_EST"],IPR["SAT Score Prediction"])
plt.xlabel("School IPR")
plt.ylabel("School's Predicted Average SAT Score")
plt.title("IPR to Predicted Average SAT Score")
slopeSAT = "{:.5f}".format(float(SATpredictor.coef_)) #It was outputting way too many decimals, so I'm shortening the slope and intercept to just 5 decimal places
interceptSAT = "{:.5f}".format(SATpredictor.intercept_)
plt.text(np.max(IPR["IPR_EST"]), np.max(IPR["SAT Score Prediction"]), "Equation: y = {}x + {}".format(slopeSAT, interceptSAT), ha='right', va='top') #I am displaying the equation of the model on the figure/graph

predictedACTgraph=plt.plot(IPR["IPR_EST"],IPR["ACT Score Prediction"])
plt.xlabel("School IPR")
plt.ylabel("School's Predicted Average ACT Score")
plt.title("IPR to Predicted Average ACT Score")
slopeACT = "{:.5f}".format(float(ACTpredictor.coef_))
interceptACT = "{:.5f}".format(ACTpredictor.intercept_)
plt.text(np.max(IPR["IPR_EST"]), np.max(IPR["ACT Score Prediction"]), "Equation: y = {}x + {}".format(slopeACT, interceptACT), ha='right', va='top')

predictedcolGPAgraph=plt.plot(IPR["IPR_EST"],IPR["College GPA Prediction"])
plt.xlabel("School IPR")
plt.ylabel("School's Students' Predicted Average College GPA")
plt.title("IPR to College GPA")
slopecolGPA = "{:.5f}".format(float(colGPApredictor.coef_))
interceptcolGPA = "{:.5f}".format(colGPApredictor.intercept_)
plt.text(np.max(IPR["IPR_EST"]), np.max(IPR["College GPA Prediction"]), "Equation: y = {}x + {}".format(slopecolGPA, interceptcolGPA), ha='right', va='top')

predictedyearsgraph=plt.plot(IPR["IPR_EST"],IPR["Years Prediction"])
plt.xlabel("School IPR")
plt.ylabel("School's Students' Predicted Average Years to Graduate College")
plt.title("IPR to Years to Graduate College")
slopeyears = "{:.5f}".format(float(yearspredictor.coef_))
interceptyears = "{:.5f}".format(yearspredictor.intercept_)
plt.text(np.max(IPR["IPR_EST"]), np.max(IPR["Years Prediction"]), "Equation: y = {}x + {}".format(slopeyears, interceptyears), ha='right', va='top')

predictedhsGPA=plt.plot(IPR["IPR_EST"],IPR["HS GPA Prediction"])
plt.xlabel("School IPR")
plt.ylabel("School's Students' Predicted Average High School GPA")
plt.title("IPR to High School GPA")
slopehsGPA = "{:.5f}".format(float(hsGPApredictor.coef_))
intercepthsGPA = "{:.5f}".format(hsGPApredictor.intercept_)
plt.text(np.max(IPR["IPR_EST"]), np.max(IPR["HS GPA Prediction"]), "Equation: y = {}x + {}".format(slopehsGPA, intercepthsGPA), ha='right', va='top')

#This was me just testing something at one point. IDK where it initally was.
print(graduation_rate["parental income"].tolist())
print(IPR.columns.tolist())
print(IPR["LAT"][2])

#------------------------------------------
#Multiple Linear Regression Stuff Begins Now
#This first model is going to take parental income and parental education level as independent variables and output the predicted college GPA.

#This code below is just initializing some variables that will be needed.
parentalincomelist=graduation_rate["parental income"].tolist()
parentaleducationlist=[]

#I'm creating a way to assign a numeric value to parental educational attainment and then create a list containing those values.
#The for loop is iterating through the parental education column of our dataset and creating a new, numeric version of the data.
for degree in graduation_rate["parental level of education"]:
  if degree == "some high school":
    parentaleducationlist.append(0)
  elif degree == "high school":
    parentaleducationlist.append(1)
  elif degree == "associate's degree":
    parentaleducationlist.append(2)
  elif degree == "some college":
    parentaleducationlist.append(3)
  elif degree == "bachelor's degree":
    parentaleducationlist.append(4)
  elif degree == "master's degree":
    parentaleducationlist.append(5)

#Everything above this point won't need to be repeated in order to create additional models.
#Techically I just repeated it from my single/simple linear regression models, but I want to be able to run this code and have it work w/o having to run the other box.
#This code block is actually creating our multiple linear regression model (for college GPA).
bivariatetrainer=np.array(list(zip(parentalincomelist,parentaleducationlist))).reshape((-1,2))
colGPAtrainer = np.array(graduation_rate["college gpa"].to_list())
individualcolGPApredictor = LinearRegression().fit(bivariatetrainer,colGPAtrainer)

#I'm just going to calculate the R score to see how well it fits.
Rscore=individualcolGPApredictor.score(bivariatetrainer,colGPAtrainer)
print("R score: {}".format(Rscore))

#And now I am going to create a dictionary that keeps track of the R score for each predictor/model that I make.
multivarRscoresdict={}
multivarRscoresdict["Individual College GPA Predictor"]=Rscore
print(multivarRscoresdict)

print(individualcolGPApredictor.predict([[100000,5]])) #I'm just seeing if the model outputs some sort of reasonable value.

#This second model is going to take the same independent variables as before, but the output will be predicted years to graduate college.

#This code block is actually creating our multiple linear regression model (for years to graduate college).
yearstrainer = np.array(graduation_rate["years to graduate"].to_list())
individualyearspredictor = LinearRegression().fit(bivariatetrainer,yearstrainer)

#I'm just going to calculate the R score to see how well it fits.
Rscore=individualyearspredictor.score(bivariatetrainer,yearstrainer)
print("R score: {}".format(Rscore))

#And now I am going to update dictionary that keeps track of the R score for each predictor/model that I make.
multivarRscoresdict["Individual Years Predictor"]=Rscore
print(multivarRscoresdict)

print(individualyearspredictor.predict([[100000,5]])) #I'm just seeing if the model outputs some sort of reasonable value.
     
#This is going to create a function that determines your "college destiny" based on your parents' income and education level.
def collegedestiny():
  '''
  This will ask for user input and then output your "college destiny" (predicted college GPA and predicted years to graduate college) on the basis of your parents' income and education level.
  '''
  futurecolGPA=0.0
  futureyears=0.0
  printstatement={}
  userparentalincome=float(input("What is your parents' income? Do not use commas."))
  userparentaleducation=float(input("What is your parents' level of education? Input '0' for some high school, '1' for high school, '2' for associate's degree, '3' for some college, '4' for bachelor's degree, and '5' for master's degree."))
  if input("Would you like to predict your future college GPA? If so, type 'yes'.").strip().lower() in ["yes","yep","sure"]: #accounting for users not reading directions
    futurecolGPA=individualcolGPApredictor.predict([[userparentalincome,userparentaleducation]])
    printstatement.update({"Future College GPA":float(futurecolGPA)})
  if input("Would you like to predict the years it will take you to graduate college? If so, type 'yes'.").strip().lower() in ["yes","yep","sure"]:
    futureyears=individualyearspredictor.predict([[userparentalincome,userparentaleducation]])
    printstatement.update({"Years to Graduate College":float(futureyears)})
  return print(printstatement)

collegedestiny()
help(collegedestiny)
